<?php

/**
 * @file
 * The content management module.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Form\FormState;
use Drupal\field\Entity\FieldConfig;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_pre_render().
 */
function content_management_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'content_management') {
    // Attach extra css.
    $view->element['#attached']['library'][] = 'content_management/style';

    // Build an easy to access content type array with human readable name.
    $contentTypes = \Drupal::service('entity.manager')
      ->getStorage('node_type')
      ->loadMultiple();
    $cts = [];
    foreach ($contentTypes as $ct) {
      $cts[$ct->id()] = $ct->label();
    }

    // Get the view parameter.
    $arg = array_shift($view->args);

    if (is_string($arg) && isset($cts[$arg])) {
      $view->setTitle(t('Manage @ct content', ['@ct' => t($cts[$arg])]));
    }
    else {
      $view->setTitle(t('Error generating content management.'));
      $view->empty['area']->options['content']['value'] = t("The content type you tried to reference doesn't exist. Please make sure it exists in the database.");
    }
  }
}

/**
 * Implements hook_views_pre_view().
 */
function content_management_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() == 'content_management') {
    $con = Database::getConnection();
    $fields = $con->query("DESCRIBE `node_field_data`")->fetchAll();
    $nodeFields = [];
    foreach ($fields as $field) {
      $nodeFields[] = $field->Field;
    }

    // Build an easy to access content type array with human readable name.
    $contentTypes = Drupal::service('entity.manager')
      ->getStorage('node_type')
      ->loadMultiple();
    $cts = [];
    foreach ($contentTypes as $ct) {
      $cts[$ct->id()] = $ct->label();
    }
    // Get the view parameter.
    $arg = array_shift($args);

    $config = Drupal::config('content_management.admin_settings');

    if (is_string($arg) && isset($cts[$arg])) {
      if ($contentTypeSettings = $config->get(strtolower($arg))) {
        // Additional columns.
        $fieldsAdded = FALSE;
        foreach ($contentTypeSettings['columns'] as $field => $enabled) {
          if ($enabled) {
            $table = 'node_field_data';
            if (!in_array($field, $nodeFields, TRUE)) {
              $table = 'node__' . $field;
            }
            $view->addHandler($display_id, 'field', $table, $field);
            $fieldsAdded = TRUE;
          }
        }

        // Bit to move changed & operations to the back.
        if ($fieldsAdded) {
          $fields = $view->getHandlers('field');
          $fieldsLast = ['changed', 'operations'];
          foreach ($fieldsLast as $fieldName) {
            $view->removeHandler($display_id, 'field', $fieldName);
            $view->addHandler($display_id, 'field', $fields[$fieldName]['table'], $fields[$fieldName]['field'], $fields[$fieldName], $fieldName);
          }
        }

        // Additional filters.
        foreach ($contentTypeSettings['filters'] as $field => $enabled) {
          if ($enabled) {
            $fieldConfig = FieldConfig::loadByName('node', $arg, $field);

            $table = 'node_field_data';
            $additionalSettings = [];
            if (!in_array($field, $nodeFields, TRUE)) {
              $table = 'node__' . $field;
              $type = $fieldConfig->getType();
              switch ($fieldConfig->getType()) {
                case 'string':
                  $field .= '_value';
                  break;

                case 'entity_reference':
                  $settings = $fieldConfig->getSettings();
                  switch ($settings['handler']) {
                    case 'default:taxonomy_term':
                      $additionalSettings = [
                        'vid' => array_pop($settings['handler_settings']['target_bundles']),
                        'limit' => TRUE,
                        'operator' => 'or',
                      ];
                      $type = 'taxonomy_index_tid';
                      break;
                  }
                  $field .= '_target_id';
                  break;
              }
            }

            $options = [
              'relationship' => 'none',
              'group_type' => 'group',
              'admin_label' => '',
              'operator' => 'contains',
              'value' => '',
              'group' => 1,
              'exposed' => TRUE,
              'expose' => [
                'operator_id' => $field . '_op',
                'operator' => $field . '_op',
                'identifier' => $field,
                'label' => $fieldConfig->getLabel(),
                'required' => FALSE,
                'remember' => FALSE,
                'multiple' => FALSE,
                'description' => '',
                'use_operator' => FALSE,
                'remember_roles' => [
                  'authenticated' => 'authenticated',
                ],
              ],
              'is_grouped' => FALSE,
              'group_info' => [
                'label' => '',
                'description' => '',
                'identifier' => '',
                'optional' => TRUE,
                'widget' => 'select',
                'multiple' => FALSE,
                'remember' => FALSE,
                'default_group' => 'All',
                'default_group_multiple' => [],
                'group_items' => [],
              ],
              'plugin_id' => $type,
            ];

            $view->addHandler($display_id, 'filter', $table, $field, array_merge($options, $additionalSettings));
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function content_management_form_alter(&$form, FormState $formState, $formId) {
  if ($formId === 'views_exposed_form' && $formState->get('view')->id() === 'content_management') {
    $currentPath = Drupal::service('path.current')->getPath();

    // Build an easy to access content type array with human readable name.
    $contentTypes = \Drupal::service('entity.manager')
      ->getStorage('node_type')
      ->loadMultiple();
    $cts = [];
    foreach ($contentTypes as $ct) {
      $cts[] = $ct->id();
    }
    $pathParts = explode('/', $currentPath);
    $arg = end($pathParts);
    if (in_array($arg, $cts, TRUE)) {
      $form['#action'] = rtrim($form['#action'], 'all') . $arg;
    }
  }
}
